dep_col = rgb(t(col2rgb(dep_col)), max = 255)
names(dep_col) = c("Depends", "Imports", "LinkingTo", "Suggests", "Enhances")
edges = glue::glue("  \"{mat[, 1]}\" -> \"{mat[, 2]}\" [color=\"{dep_col[mat[, 3]]}\"];", collapse = FALSE)
dot = paste(
c("digraph {",
"  nodesep=0.05",
glue::glue("  rankdir={rankdir};"),
"  graph [overlap = true];",
"  node[shape = box];",
nodes,
edges,
"}"),
collapse = "\n"
)
DiagrammeR::grViz(dot)
}
db = pkgndep::reformat_db(installed.packages())
loaded_pkgs = function(pkg) {
for(i in seq_along(pkg)) {
library(pkg[i], character.only=TRUE)
}
session_info = sessionInfo()
base_pkgs = session_info$basePkgs
other_pkgs = sapply(session_info$otherPkgs, function(x)x$Package)
loaded_pkgs = sapply(session_info$loadedOnly, function(x)x$Package)
lt = list(base_pkgs = base_pkgs,
other_pkgs = other_pkgs,
loaded_pkgs = loaded_pkgs)
jsonlite::toJSON(lt)
}
dep_in_session = function(pkg, db, dep_group = "strong", rankdir = "LR") {
session_info = jsonlite::fromJSON(callr::r(loaded_pkgs, args = list(pkg = pkg)))
base_pkgs = session_info$base_pkgs
other_pkgs = session_info$other_pkgs
loaded_pkgs = session_info$loaded_pkgs
mat = matrix(nrow = 0, ncol = 3)
for(pkg in other_pkgs) {
mat = rbind(mat, db$package_dependencies(pkg, recursive = TRUE, which = dep_group))
}
mat = unique(mat)
mat = mat[!mat[, 1] %in% pkgndep:::BASE_PKGS | mat[, 2] %in% pkgndep:::BASE_PKGS, , drop = FALSE]
all_pkgs = c(other_pkgs, loaded_pkgs)
mat = mat[mat[, 1] %in% all_pkgs & mat[, 2] %in% all_pkgs, , drop = FALSE]
all_nodes = unique(c(mat[, 1], mat[, 2], other_pkgs, loaded_pkgs))
node_col = rep("black", length(all_nodes))
node_col[all_nodes %in% other_pkgs] = "red"
node_col[all_nodes %in% loaded_pkgs] = "blue"
nodes = glue::glue("  \"{all_nodes}\" [color=\"{node_col}\"];", collapse = FALSE)
dep_col = c(2, 4, 3, 5, 6)
dep_col = rgb(t(col2rgb(dep_col)), max = 255)
names(dep_col) = c("Depends", "Imports", "LinkingTo", "Suggests", "Enhances")
edges = glue::glue("  \"{mat[, 1]}\" -> \"{mat[, 2]}\" [color=\"{dep_col[mat[, 3]]}\"];", collapse = FALSE)
dot = paste(
c("digraph {",
"  nodesep=0.05",
glue::glue("  rankdir={rankdir};"),
"  graph [overlap = true];",
"  node[shape = box];",
nodes,
edges,
"}"),
collapse = "\n"
)
DiagrammeR::grViz(dot)
}
dep_in_session("shortRNA", db = db, dep_group = "all")
library(shortRNA)
db = pkgndep::reformat_db(installed.packages())
dependency_heatmap("shortRNA")
pkgndep::dependency_heatmap("shortRNA")
pkg = pkgndep::pkgndep("shortRNA")
pkgndep::dependency_heatmap(pkg)
pkgndep::heaviness_database()
BiocManager::install("Rook")
pkgndep::heaviness_database()
pkgndep::heaviness_report("shortRNA")
BiocManager::install("base64")
pkgndep::heaviness_report("shortRNA")
pkgndep::heaviness_report(pkg)
BiocManager::install("devtoo")
BiocManager::install("remotes")
BiocManager::install("shortRNAhub/shortRNA")
library(shortRNA)
db = pkgndep::reformat_db(installed.packages())
loaded_pkgs = function(pkg) {
for(i in seq_along(pkg)) {
library(pkg[i], character.only=TRUE)
}
session_info = sessionInfo()
base_pkgs = session_info$basePkgs
other_pkgs = sapply(session_info$otherPkgs, function(x)x$Package)
loaded_pkgs = sapply(session_info$loadedOnly, function(x)x$Package)
lt = list(base_pkgs = base_pkgs,
other_pkgs = other_pkgs,
loaded_pkgs = loaded_pkgs)
jsonlite::toJSON(lt)
}
dep_in_session = function(pkg, db, dep_group = "strong", rankdir = "LR") {
session_info = jsonlite::fromJSON(callr::r(loaded_pkgs, args = list(pkg = pkg)))
base_pkgs = session_info$base_pkgs
other_pkgs = session_info$other_pkgs
loaded_pkgs = session_info$loaded_pkgs
mat = matrix(nrow = 0, ncol = 3)
for(pkg in other_pkgs) {
mat = rbind(mat, db$package_dependencies(pkg, recursive = TRUE, which = dep_group))
}
mat = unique(mat)
mat = mat[!mat[, 1] %in% pkgndep:::BASE_PKGS | mat[, 2] %in% pkgndep:::BASE_PKGS, , drop = FALSE]
all_pkgs = c(other_pkgs, loaded_pkgs)
mat = mat[mat[, 1] %in% all_pkgs & mat[, 2] %in% all_pkgs, , drop = FALSE]
all_nodes = unique(c(mat[, 1], mat[, 2], other_pkgs, loaded_pkgs))
node_col = rep("black", length(all_nodes))
node_col[all_nodes %in% other_pkgs] = "red"
node_col[all_nodes %in% loaded_pkgs] = "blue"
nodes = glue::glue("  \"{all_nodes}\" [color=\"{node_col}\"];", collapse = FALSE)
dep_col = c(2, 4, 3, 5, 6)
dep_col = rgb(t(col2rgb(dep_col)), max = 255)
names(dep_col) = c("Depends", "Imports", "LinkingTo", "Suggests", "Enhances")
edges = glue::glue("  \"{mat[, 1]}\" -> \"{mat[, 2]}\" [color=\"{dep_col[mat[, 3]]}\"];", collapse = FALSE)
dot = paste(
c("digraph {",
"  nodesep=0.05",
glue::glue("  rankdir={rankdir};"),
"  graph [overlap = true];",
"  node[shape = box];",
nodes,
edges,
"}"),
collapse = "\n"
)
graph <- DiagrammeR::grViz(dot)
# widget <- htmlwidgets::createWidget(graph, "grViz")
htmlwidgets::saveWidget(graph, "test.html")
}
dep_in_session("shortRNA", db = db, dep_group = "strong")
pkg = "shortRNA"
db = db
dep_group = "strong"
rankdir = "LR"
session_info = jsonlite::fromJSON(callr::r(loaded_pkgs, args = list(pkg = pkg)))
base_pkgs = session_info$base_pkgs
other_pkgs = session_info$other_pkgs
loaded_pkgs = session_info$loaded_pkgs
mat = matrix(nrow = 0, ncol = 3)
for(pkg in other_pkgs) {
mat = rbind(mat, db$package_dependencies(pkg, recursive = TRUE, which = dep_group))
}
mat = unique(mat)
mat = mat[!mat[, 1] %in% pkgndep:::BASE_PKGS | mat[, 2] %in% pkgndep:::BASE_PKGS, , drop = FALSE]
all_pkgs = c(other_pkgs, loaded_pkgs)
mat = mat[mat[, 1] %in% all_pkgs & mat[, 2] %in% all_pkgs, , drop = FALSE]
all_nodes = unique(c(mat[, 1], mat[, 2], other_pkgs, loaded_pkgs))
node_col = rep("black", length(all_nodes))
node_col[all_nodes %in% other_pkgs] = "red"
node_col[all_nodes %in% loaded_pkgs] = "blue"
nodes = glue::glue("  \"{all_nodes}\" [color=\"{node_col}\"];", collapse = FALSE)
dep_col = c(2, 4, 3, 5, 6)
dep_col = rgb(t(col2rgb(dep_col)), max = 255)
names(dep_col) = c("Depends", "Imports", "LinkingTo", "Suggests", "Enhances")
edges = glue::glue("  \"{mat[, 1]}\" -> \"{mat[, 2]}\" [color=\"{dep_col[mat[, 3]]}\"];", collapse = FALSE)
dot = paste(
c("digraph {",
"  nodesep=0.05",
glue::glue("  rankdir={rankdir};"),
"  graph [overlap = true];",
"  node[shape = box];",
nodes,
edges,
"}"),
collapse = "\n"
)
dot
BiocManager::install("ggdag")
library(ggdag)
ggdag(dot)
ggdag(dot, layout = "circle")
library(dagitty)
library(ggdag)
library(ggplot2)
dag <- dagitty("dag{y <- z -> x}")
tidy_dagitty(dag)
graph <- create_graph(dot)
library(DiagrammeR)
graph <- create_graph(dot)
dot
dot_representation <- "
digraph {
A -> B
B -> C
B -> D
C -> E
}
"
# Create a graph from the DOT representation
graph <- create_graph(dot_representation)
dot_representation <- "
digraph {
A -> B
B -> C
B -> D
C -> E
}
"
# Create a graph from the DOT representation
graph <- create_graph(dot_representation)
graph <- create_graph(dot)
graph <- DiagrammeR::grViz(dot)
gd <- extract_graph(graph)
library(DiagrammeR)
# Assuming viz is the visualization object created using grViz
# Replace this with your actual grViz object
viz <- grViz("digraph { A -> B; B -> C; B -> D; C -> E; }")
# Extract nodes and edges from the visualization (example, actual method might vary)
graph_data <- extract_graph(viz)  # Replace with actual extraction method if available
gd <- DiagrammeR:::export_graph(graph)
dagify(dot)
library(ggdag)
library(graphviz)
BiocManager::install(graphviz)
BiocManager::install("graphviz")
create_graph(dot)
library(ggdag)
library(graphviz)
BiocManager::install("Rgraphviz")
library(Rgraphviz)
dag <- dagify(dot)
Rgraphviz::toDot(graph)
DiagrammeR::generate_dot(graph)
graph
graph$x
DiagrammeR::generate_dot(graph$x)
class(graph)
class(dot)
DiagrammeR::renderGrViz(graph)
DiagrammeR::renderGrViz(dot)
dot
dagify(dot)
writeLines(dot, con = "~/Desktop/dot.dot")
dot_file <- readLines("~/Desktop/dot.dot")
dot_file
dag <- dagify(dot_file)
graph <- DiagrammeR::grViz(dot_file)
graph
library(devtools)
install_github("jokergoo/InteractiveComplexHeatmap")
library(interactiveDisplayBase)
library(interactiveComplexHeatmap)
library(InteractiveComplexHeatmap)
library(ComplexHeatmap)
library(pkgndep)
x = pkgndep("shortRNA")
dependency_heatmap(x, fix_size = FALSE)
ht <- dependency_heatmap(x, fix_size = FALSE)
htShiny(ht)
dependency_heatmap(x, fix_size = FALSE)
heaviness_report(pkg)
heaviness_report(x)
m = co_heaviness(x)
m
library(ComplexHeatmap)
Heatmap(m, name = "co-heaviness")
co_heaviness(x, jaccard = TRUE)
m = co_heaviness(x, jaccard = T)
m
library(ComplexHeatmap)
Heatmap(m, name = "co-heaviness")
m = co_heaviness(x)
m
m = co_heaviness(x)
m
```{r}
library(ComplexHeatmap)
Heatmap(m, name = "co-heaviness")
Heatmap(m, name = "co-heaviness", col = viridis::cividis())
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100))
m = co_heaviness(x, rel = T)
```{r}
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100))
m = co_heaviness(x,jaccard = T)
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100))
?co_heaviness
m = co_heaviness(x, rel = FALSE, a = 10, jaccard = FALSE)
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100))
heaviness(x, rel = TRUE)
heaviness(x)
?heaviness
barplot(heaviness(x, rel = TRUE))
barplot(heaviness(x, rel = TRUE), horiz = T)
barplot(heaviness(x), horiz = T, )
barplot(heaviness(x), horiz = T, angle = 45)
barplot(heaviness(x), horiz = T, angle = 90)
barplot(heaviness(x), horiz = F, angle = 90)
barplot(heaviness(x), horiz = F, angle = 45)
barplot(heaviness(x), horiz = F, las=2)
barplot(heaviness(x), horiz = T, las=2)
par(mar = c(7, 4, 2, 2) + 0.2)
barplot(heaviness(x), horiz = T, las=2)
barplot(heaviness(x), horiz = F, las=2)
par(mar = c(7, 4, 2, 2) + 2)
barplot(heaviness(x), horiz = F, las=2)
barplot(heaviness(x), horiz = T, las=2)
par(mar = c(7, 4, 2, 2) + 5)
barplot(heaviness(x), horiz = T, las=2)
# Heaviness of the packages
```{r, warning=FALSE, message=FALSE}
library(pkgndep)
library(ComplexHeatmap)
he <- data.frame(heaviness(x))
he
he <- heaviness(x)
he
he <- data.frame(Package = names(he), Heaviness = he)
he
library(ggplot)
library(ggplot2)
ggplot(data = he, aes(x = Package, y = Heaviness)) +
geom_bar()
ggplot(data = he, aes(x = Package, y = Heaviness)) +
geom_bar(stat="identity")
ggplot(data = he, aes(x = Package, y = Heaviness)) +
geom_bar(stat="identity") +
+ coord_flip()
ggplot(data = he, aes(x = Package, y = Heaviness)) +
geom_bar(stat="identity") +
+ coord_flip()
ggplot(data = he, aes(x = Package, y = Heaviness)) +
geom_bar(stat="identity") +
coord_flip()
data.frame(Package = names(he), Heaviness = he) %>%
arrange(desc(Heaviness))
library(dplyr)
data.frame(Package = names(he), Heaviness = he) %>%
arrange(desc(Heaviness))
he <- heaviness(x)
data.frame(Package = names(he), Heaviness = he) %>%
arrange(desc(Heaviness))
data.frame(Package = names(he), Heaviness = he) %>%
arrange(desc(Heaviness)) -> he
ggplot(data = he, aes(x = Package, y = Heaviness)) +
geom_bar(stat="identity") +
coord_flip()
he <- heaviness(x)
data.frame(Package = names(he), Heaviness = he) %>%
arrange(desc(Heaviness)) -> he
library(ggplot2)
library(dplyr)
ggplot(data = he, aes(x = Package, y = Heaviness)) +
geom_bar(stat="identity") +
coord_flip()
he <- heaviness(x)
he <- data.frame(Package = names(he), Heaviness = he)
library(ggplot2)
ggplot(data = he, aes(x = reorder(Package, -Heaviness), y = Heaviness)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(data = he, aes(x = reorder(Package, Heaviness), y = Heaviness)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(data = he, aes(x = reorder(Package, Heaviness), y = Heaviness)) +
geom_bar(stat="identity") +
coord_flip() +
theme_bw()
ggplot(data = he, aes(x = reorder(Package, Heaviness), y = Heaviness)) +
geom_bar(stat="identity") +
coord_flip() +
theme_bw() +
xlab("Packages")
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100), row_names_gp = gpar(fontsize = 2))
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100), row_names_gp = gpar(fontsize = 12))
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100), row_names_gp = gpar(fontsize = 10))
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100),
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10), height = unit(10, "cm")
)
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100),
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10), height = unit(12, "cm")
)
Heatmap(m, name = "co-heaviness", col = viridis::cividis(n = 100),
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10), height = unit(15, "cm")
)
BiocManager::install("styler")
styler::tidyverse_style()
styler:::style_active_file()
xfun::session_info()
devtools::session_info()
BiocManager::install("details")
devtools::session_info() dplyr::`%>%` details::details()
devtools::session_info() %>% details::details()
BiocManager::install(report)
BiocManager::install("report")
?co_heaviness
library(shortRNA)
db = pkgndep::reformat_db(installed.packages())
loaded_pkgs = function(pkg) {
for(i in seq_along(pkg)) {
library(pkg[i], character.only=TRUE)
}
session_info = sessionInfo()
base_pkgs = session_info$basePkgs
other_pkgs = sapply(session_info$otherPkgs, function(x)x$Package)
loaded_pkgs = sapply(session_info$loadedOnly, function(x)x$Package)
lt = list(base_pkgs = base_pkgs,
other_pkgs = other_pkgs,
loaded_pkgs = loaded_pkgs)
jsonlite::toJSON(lt)
}
dep_in_session = function(pkg, db, dep_group = "strong", rankdir = "LR") {
session_info = jsonlite::fromJSON(callr::r(loaded_pkgs, args = list(pkg = pkg)))
base_pkgs = session_info$base_pkgs
other_pkgs = session_info$other_pkgs
loaded_pkgs = session_info$loaded_pkgs
mat = matrix(nrow = 0, ncol = 3)
for(pkg in other_pkgs) {
mat = rbind(mat, db$package_dependencies(pkg, recursive = TRUE, which = dep_group))
}
mat = unique(mat)
mat = mat[!mat[, 1] %in% pkgndep:::BASE_PKGS | mat[, 2] %in% pkgndep:::BASE_PKGS, , drop = FALSE]
all_pkgs = c(other_pkgs, loaded_pkgs)
mat = mat[mat[, 1] %in% all_pkgs & mat[, 2] %in% all_pkgs, , drop = FALSE]
all_nodes = unique(c(mat[, 1], mat[, 2], other_pkgs, loaded_pkgs))
node_col = rep("black", length(all_nodes))
node_col[all_nodes %in% other_pkgs] = "red"
node_col[all_nodes %in% loaded_pkgs] = "blue"
nodes = glue::glue("  \"{all_nodes}\" [color=\"{node_col}\"];", collapse = FALSE)
dep_col = c(2, 4, 3, 5, 6)
dep_col = rgb(t(col2rgb(dep_col)), max = 255)
names(dep_col) = c("Depends", "Imports", "LinkingTo", "Suggests", "Enhances")
edges = glue::glue("  \"{mat[, 1]}\" -> \"{mat[, 2]}\" [color=\"{dep_col[mat[, 3]]}\"];", collapse = FALSE)
dot = paste(
c("digraph {",
"  nodesep=0.05",
glue::glue("  rankdir={rankdir};"),
"  graph [overlap = true];",
"  node[shape = box];",
nodes,
edges,
"}"),
collapse = "\n"
)
DiagrammeR::grViz(dot)
}
?heaviness
heaviness
pkgndep::heaviness
x
x <- pkgndep("shortRNA")
library(pkgndep)
library(ggplot2)
library(dplyr)
library(ComplexHeatmap)
x <- pkgndep("shortRNA")
x
x$dep_mat
?co_heaviness
setwd("~/Desktop/shortRNA_deps")
library(shortRNA)
db = pkgndep::reformat_db(installed.packages())
loaded_pkgs = function(pkg) {
for(i in seq_along(pkg)) {
library(pkg[i], character.only=TRUE)
}
session_info = sessionInfo()
base_pkgs = session_info$basePkgs
other_pkgs = sapply(session_info$otherPkgs, function(x)x$Package)
loaded_pkgs = sapply(session_info$loadedOnly, function(x)x$Package)
lt = list(base_pkgs = base_pkgs,
other_pkgs = other_pkgs,
loaded_pkgs = loaded_pkgs)
jsonlite::toJSON(lt)
}
dep_in_session = function(pkg, db, dep_group = "strong", rankdir = "LR") {
session_info = jsonlite::fromJSON(callr::r(loaded_pkgs, args = list(pkg = pkg)))
base_pkgs = session_info$base_pkgs
other_pkgs = session_info$other_pkgs
loaded_pkgs = session_info$loaded_pkgs
mat = matrix(nrow = 0, ncol = 3)
for(pkg in other_pkgs) {
mat = rbind(mat, db$package_dependencies(pkg, recursive = TRUE, which = dep_group))
}
mat = unique(mat)
mat = mat[!mat[, 1] %in% pkgndep:::BASE_PKGS | mat[, 2] %in% pkgndep:::BASE_PKGS, , drop = FALSE]
all_pkgs = c(other_pkgs, loaded_pkgs)
mat = mat[mat[, 1] %in% all_pkgs & mat[, 2] %in% all_pkgs, , drop = FALSE]
all_nodes = unique(c(mat[, 1], mat[, 2], other_pkgs, loaded_pkgs))
node_col = rep("black", length(all_nodes))
node_col[all_nodes %in% other_pkgs] = "red"
node_col[all_nodes %in% loaded_pkgs] = "blue"
nodes = glue::glue("  \"{all_nodes}\" [color=\"{node_col}\"];", collapse = FALSE)
dep_col = c(2, 4, 3, 5, 6)
dep_col = rgb(t(col2rgb(dep_col)), max = 255)
names(dep_col) = c("Depends", "Imports", "LinkingTo", "Suggests", "Enhances")
edges = glue::glue("  \"{mat[, 1]}\" -> \"{mat[, 2]}\" [color=\"{dep_col[mat[, 3]]}\"];", collapse = FALSE)
dot = paste(
c("digraph {",
"  nodesep=0.05",
glue::glue("  rankdir={rankdir};"),
"  graph [overlap = true];",
"  node[shape = box];",
nodes,
edges,
"}"),
collapse = "\n"
)
DiagrammeR::grViz(dot)
}
styler:::style_active_file()
?heaviness_report
pkgndep::heaviness_report("shortRNA")
pkgndep::heaviness_report(pkgndep::pkgndep("shortRNA"), file = "shortRNA_report.html")
citation("shortRNA")
